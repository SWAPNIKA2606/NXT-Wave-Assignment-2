npm init -y
npm install express sequelize bcrypt jsonwebtoken

// database.js
const { Sequelize, DataTypes } = require('sequelize');

const sequelize = new Sequelize('database', 'username', 'password', {
  host: 'localhost',
  dialect: 'mysql',
});

const User = sequelize.define('User', {
  id: {
    type: DataTypes.INTEGER,
    primaryKey: true,
    autoIncrement: true,
  },
  username: {
    type: DataTypes.STRING,
    unique: true,
  },
  password: {
    type: DataTypes.STRING,
  },
});

const Appointment = sequelize.define('Appointment', {
  id: {
    type: DataTypes.INTEGER,
    primaryKey: true,
    autoIncrement: true,
  },
  userId: {
    type: DataTypes.INTEGER,
    references: {
      model: User,
      key: 'id',
    },
  },
  date: {
    type: DataTypes.DATE,
  },
  time: {
    type: DataTypes.TIME,
  },
});

module.exports = { sequelize, User, Appointment };

// api.js
const express = require('express');
const router = express.Router();
const { User, Appointment } = require('./database');
const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');

router.post('/signup', async (req, res) => {
  try {
    const hashedPassword = await bcrypt.hash(req.body.password, 10);
    const user = await User.create({
      username: req.body.username,
      password: hashedPassword,
    });
    res.json(user);
  } catch (error) {
    res.status(400).json({ error: 'Username already taken' });
  }
});

router.post('/signin', async (req, res) => {
  try {
    const user = await User.findOne({
      where: {
        username: req.body.username,
      },
    });
    if (!user) {
      return res.status(401).json({ error: 'Invalid username or password' });
    }
    const isValidPassword = await bcrypt.compare(req.body.password, user.password);
    if (!isValidPassword) {
      return res.status(401).json({ error: 'Invalid username or password' });
    }
    const token = jwt.sign({ userId: user.id }, 'secretkey', {
      expiresIn: '1h',
    });
    res.json({ token });
  } catch (error) {
    res.status(401).json({ error: 'Invalid username or password' });
  }
});

router.post('/appointments', async (req, res) => {
  try {
    const appointment = await Appointment.create({
      userId: req.user.id,
      date: req.body.date,
      time: req.body.time,
    });
    res.json(appointment);
  } catch (error) {
    res.status(400).json({ error: 'Invalid appointment data' });
  }
});

router.get('/appointments', async (req, res) => {
  try {
    const appointments = await Appointment.findAll({
      where: {
        userId: req.user.id,
      },
    });
    res.json(appointments);
  } catch (error) {
    res.status(401).json({ error: 'Unauthorized' });
  }
});

module.exports = router;

// middleware.js
const jwt = require('jsonwebtoken');

const authenticate = async (req, res, next) => {
  try {
    const token = req.header('Authorization').replace('Bearer ', '');
    const decoded = jwt.verify(token, 'secretkey');
    req.user = decoded;
    next();
  } catch (error) {
    res.status(401).json({ error: 'Unauthorized' });
  }
};

module.exports = authenticate;

// SignUp.js
import React, { useState } from 'react';
import axios from 'axios';

const SignUp = () => {
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const [error, setError] = useState(null);

  const handleSubmit = async (event) => {
    event.preventDefault